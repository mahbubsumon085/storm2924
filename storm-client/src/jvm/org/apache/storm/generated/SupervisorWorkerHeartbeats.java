/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class SupervisorWorkerHeartbeats implements org.apache.thrift.TBase<SupervisorWorkerHeartbeats, SupervisorWorkerHeartbeats._Fields>, java.io.Serializable, Cloneable, Comparable<SupervisorWorkerHeartbeats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisorWorkerHeartbeats");

  private static final org.apache.thrift.protocol.TField SUPERVISOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisor_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WORKER_HEARTBEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("worker_heartbeats", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SupervisorWorkerHeartbeatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SupervisorWorkerHeartbeatsTupleSchemeFactory());
  }

  private String supervisor_id; // required
  private List<SupervisorWorkerHeartbeat> worker_heartbeats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUPERVISOR_ID((short)1, "supervisor_id"),
    WORKER_HEARTBEATS((short)2, "worker_heartbeats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUPERVISOR_ID
          return SUPERVISOR_ID;
        case 2: // WORKER_HEARTBEATS
          return WORKER_HEARTBEATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUPERVISOR_ID, new org.apache.thrift.meta_data.FieldMetaData("supervisor_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKER_HEARTBEATS, new org.apache.thrift.meta_data.FieldMetaData("worker_heartbeats", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SupervisorWorkerHeartbeat.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisorWorkerHeartbeats.class, metaDataMap);
  }

  public SupervisorWorkerHeartbeats() {
  }

  public SupervisorWorkerHeartbeats(
    String supervisor_id,
    List<SupervisorWorkerHeartbeat> worker_heartbeats)
  {
    this();
    this.supervisor_id = supervisor_id;
    this.worker_heartbeats = worker_heartbeats;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisorWorkerHeartbeats(SupervisorWorkerHeartbeats other) {
    if (other.is_set_supervisor_id()) {
      this.supervisor_id = other.supervisor_id;
    }
    if (other.is_set_worker_heartbeats()) {
      List<SupervisorWorkerHeartbeat> __this__worker_heartbeats = new ArrayList<SupervisorWorkerHeartbeat>(other.worker_heartbeats.size());
      for (SupervisorWorkerHeartbeat other_element : other.worker_heartbeats) {
        __this__worker_heartbeats.add(new SupervisorWorkerHeartbeat(other_element));
      }
      this.worker_heartbeats = __this__worker_heartbeats;
    }
  }

  public SupervisorWorkerHeartbeats deepCopy() {
    return new SupervisorWorkerHeartbeats(this);
  }

  @Override
  public void clear() {
    this.supervisor_id = null;
    this.worker_heartbeats = null;
  }

  public String get_supervisor_id() {
    return this.supervisor_id;
  }

  public void set_supervisor_id(String supervisor_id) {
    this.supervisor_id = supervisor_id;
  }

  public void unset_supervisor_id() {
    this.supervisor_id = null;
  }

  /** Returns true if field supervisor_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_supervisor_id() {
    return this.supervisor_id != null;
  }

  public void set_supervisor_id_isSet(boolean value) {
    if (!value) {
      this.supervisor_id = null;
    }
  }

  public int get_worker_heartbeats_size() {
    return (this.worker_heartbeats == null) ? 0 : this.worker_heartbeats.size();
  }

  public java.util.Iterator<SupervisorWorkerHeartbeat> get_worker_heartbeats_iterator() {
    return (this.worker_heartbeats == null) ? null : this.worker_heartbeats.iterator();
  }

  public void add_to_worker_heartbeats(SupervisorWorkerHeartbeat elem) {
    if (this.worker_heartbeats == null) {
      this.worker_heartbeats = new ArrayList<SupervisorWorkerHeartbeat>();
    }
    this.worker_heartbeats.add(elem);
  }

  public List<SupervisorWorkerHeartbeat> get_worker_heartbeats() {
    return this.worker_heartbeats;
  }

  public void set_worker_heartbeats(List<SupervisorWorkerHeartbeat> worker_heartbeats) {
    this.worker_heartbeats = worker_heartbeats;
  }

  public void unset_worker_heartbeats() {
    this.worker_heartbeats = null;
  }

  /** Returns true if field worker_heartbeats is set (has been assigned a value) and false otherwise */
  public boolean is_set_worker_heartbeats() {
    return this.worker_heartbeats != null;
  }

  public void set_worker_heartbeats_isSet(boolean value) {
    if (!value) {
      this.worker_heartbeats = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUPERVISOR_ID:
      if (value == null) {
        unset_supervisor_id();
      } else {
        set_supervisor_id((String)value);
      }
      break;

    case WORKER_HEARTBEATS:
      if (value == null) {
        unset_worker_heartbeats();
      } else {
        set_worker_heartbeats((List<SupervisorWorkerHeartbeat>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUPERVISOR_ID:
      return get_supervisor_id();

    case WORKER_HEARTBEATS:
      return get_worker_heartbeats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUPERVISOR_ID:
      return is_set_supervisor_id();
    case WORKER_HEARTBEATS:
      return is_set_worker_heartbeats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisorWorkerHeartbeats)
      return this.equals((SupervisorWorkerHeartbeats)that);
    return false;
  }

  public boolean equals(SupervisorWorkerHeartbeats that) {
    if (that == null)
      return false;

    boolean this_present_supervisor_id = true && this.is_set_supervisor_id();
    boolean that_present_supervisor_id = true && that.is_set_supervisor_id();
    if (this_present_supervisor_id || that_present_supervisor_id) {
      if (!(this_present_supervisor_id && that_present_supervisor_id))
        return false;
      if (!this.supervisor_id.equals(that.supervisor_id))
        return false;
    }

    boolean this_present_worker_heartbeats = true && this.is_set_worker_heartbeats();
    boolean that_present_worker_heartbeats = true && that.is_set_worker_heartbeats();
    if (this_present_worker_heartbeats || that_present_worker_heartbeats) {
      if (!(this_present_worker_heartbeats && that_present_worker_heartbeats))
        return false;
      if (!this.worker_heartbeats.equals(that.worker_heartbeats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_supervisor_id = true && (is_set_supervisor_id());
    list.add(present_supervisor_id);
    if (present_supervisor_id)
      list.add(supervisor_id);

    boolean present_worker_heartbeats = true && (is_set_worker_heartbeats());
    list.add(present_worker_heartbeats);
    if (present_worker_heartbeats)
      list.add(worker_heartbeats);

    return list.hashCode();
  }

  @Override
  public int compareTo(SupervisorWorkerHeartbeats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_supervisor_id()).compareTo(other.is_set_supervisor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_supervisor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisor_id, other.supervisor_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_worker_heartbeats()).compareTo(other.is_set_worker_heartbeats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_worker_heartbeats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker_heartbeats, other.worker_heartbeats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SupervisorWorkerHeartbeats(");
    boolean first = true;

    sb.append("supervisor_id:");
    if (this.supervisor_id == null) {
      sb.append("null");
    } else {
      sb.append(this.supervisor_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("worker_heartbeats:");
    if (this.worker_heartbeats == null) {
      sb.append("null");
    } else {
      sb.append(this.worker_heartbeats);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_supervisor_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'supervisor_id' is unset! Struct:" + toString());
    }

    if (!is_set_worker_heartbeats()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'worker_heartbeats' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisorWorkerHeartbeatsStandardSchemeFactory implements SchemeFactory {
    public SupervisorWorkerHeartbeatsStandardScheme getScheme() {
      return new SupervisorWorkerHeartbeatsStandardScheme();
    }
  }

  private static class SupervisorWorkerHeartbeatsStandardScheme extends StandardScheme<SupervisorWorkerHeartbeats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SupervisorWorkerHeartbeats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUPERVISOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supervisor_id = iprot.readString();
              struct.set_supervisor_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORKER_HEARTBEATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list878 = iprot.readListBegin();
                struct.worker_heartbeats = new ArrayList<SupervisorWorkerHeartbeat>(_list878.size);
                SupervisorWorkerHeartbeat _elem879;
                for (int _i880 = 0; _i880 < _list878.size; ++_i880)
                {
                  _elem879 = new SupervisorWorkerHeartbeat();
                  _elem879.read(iprot);
                  struct.worker_heartbeats.add(_elem879);
                }
                iprot.readListEnd();
              }
              struct.set_worker_heartbeats_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SupervisorWorkerHeartbeats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.supervisor_id != null) {
        oprot.writeFieldBegin(SUPERVISOR_ID_FIELD_DESC);
        oprot.writeString(struct.supervisor_id);
        oprot.writeFieldEnd();
      }
      if (struct.worker_heartbeats != null) {
        oprot.writeFieldBegin(WORKER_HEARTBEATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.worker_heartbeats.size()));
          for (SupervisorWorkerHeartbeat _iter881 : struct.worker_heartbeats)
          {
            _iter881.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisorWorkerHeartbeatsTupleSchemeFactory implements SchemeFactory {
    public SupervisorWorkerHeartbeatsTupleScheme getScheme() {
      return new SupervisorWorkerHeartbeatsTupleScheme();
    }
  }

  private static class SupervisorWorkerHeartbeatsTupleScheme extends TupleScheme<SupervisorWorkerHeartbeats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SupervisorWorkerHeartbeats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.supervisor_id);
      {
        oprot.writeI32(struct.worker_heartbeats.size());
        for (SupervisorWorkerHeartbeat _iter882 : struct.worker_heartbeats)
        {
          _iter882.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SupervisorWorkerHeartbeats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.supervisor_id = iprot.readString();
      struct.set_supervisor_id_isSet(true);
      {
        org.apache.thrift.protocol.TList _list883 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.worker_heartbeats = new ArrayList<SupervisorWorkerHeartbeat>(_list883.size);
        SupervisorWorkerHeartbeat _elem884;
        for (int _i885 = 0; _i885 < _list883.size; ++_i885)
        {
          _elem884 = new SupervisorWorkerHeartbeat();
          _elem884.read(iprot);
          struct.worker_heartbeats.add(_elem884);
        }
      }
      struct.set_worker_heartbeats_isSet(true);
    }
  }

}

